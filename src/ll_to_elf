#include <llvm-c/Core.h>
#include <llvm-c/Analysis.h>
#include <llvm-c/Target.h>
#include <llvm-c/TargetMachine.h>
#include <llvm-c/BitWriter.h>
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char **argv) {
    char *error = NULL;
    // Suppose 'mod' is your LLVM module. You can create it from IR text or build it programmatically.
    // For this example, we assume you have IR in a file called "output.ll"
    LLVMModuleRef mod;
    if (LLVMParseIRInContext(LLVMGetGlobalContext(),
                             /* Create a memory buffer from file */
                             LLVMCreateMemoryBufferWithContentsOfFile("output.ll", NULL, &error),
                             &mod, &error) != 0) {
         fprintf(stderr, "Error parsing IR: %s\n", error);
         LLVMDisposeMessage(error);
         return 1;
    }
    
    // Set the target triple (if not already set) to the native triple.
    char *triple = LLVMGetDefaultTargetTriple();
    LLVMSetTarget(mod, triple);

    // Initialize the native target and the native asm printer.
    LLVMInitializeNativeTarget();
    LLVMInitializeNativeAsmPrinter();

    LLVMTargetRef target;
    if (LLVMGetTargetFromTriple(triple, &target, &error) != 0) {
         fprintf(stderr, "Error getting target: %s\n", error);
         LLVMDisposeMessage(error);
         return 1;
    }

    // Create a target machine.
    LLVMTargetMachineRef targetMachine = LLVMCreateTargetMachine(
        target,
        triple,
        "generic",          /* CPU string */
        "",                 /* Features string */
        LLVMCodeGenOptLevelDefault,
        LLVMRelocDefault,
        LLVMCodeModelDefault
    );

    // Optionally, run some verification on the module.
    if (LLVMVerifyModule(mod, LLVMReturnStatusAction, &error) != 0) {
         fprintf(stderr, "Module verification error: %s\n", error);
         LLVMDisposeMessage(error);
         return 1;
    }

    // Emit an object file directly.
    if (LLVMTargetMachineEmitToFile(targetMachine, mod, "output.o", LLVMObjectFile, &error) != 0) {
         fprintf(stderr, "Error emitting object file: %s\n", error);
         LLVMDisposeMessage(error);
         return 1;
    }

    printf("Successfully emitted object file 'output.o'.\n");

    // Clean up.
    LLVMDisposeTargetMachine(targetMachine);
    LLVMDisposeModule(mod);
    LLVMDisposeMessage(triple);

    return 0;
}

